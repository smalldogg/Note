## 秒杀需要解决的问题

1，大流量的瞬时请求



高并发的解决方案：

1，消息队列

2，缓存

![](D:\MyWork\MarkDownPicture\秒杀\秒杀01.png)

![](D:\MyWork\MarkDownPicture\秒杀\秒杀02.png)

## 架构原则

### 减少用户和服务端的交互

数据要少：请求参数和相应参数要少，降低对网络带宽的占用，降低对cpu的消耗，对IO数据库。（非必要的信息不要来回传）。

请求数要少：合并请求。

路径要短：每个节点可靠性：99%，5个节点：95%。

依赖要少：花里胡哨的减少。优先级高的展示，低的去掉。



不要单点：保证高可用：负载均衡，水平扩展，（replicates :3）

# 动静数据分离

数据区分：url，用户，浏览的时间，地域，cookie（缓存信息）-》静态数据。cdn，负载均衡。



url1（商品详情），url1：详情 （json）   。

放到离用户最近的地方。cdn。（浏览器缓存，服务器缓存guava cache, map，redis，文件缓存等）

根据不同的用户类型做缓存。

根据不同的用户类型做缓存。

### 恶意下单

1，下单数量的限制

2，根据ip限制



### 下单如何减库存

1，下单减库存

2，将库存放在redis中ONG



# 热点数据

本来 卖衣服秒杀，系统都为衣服服务，结果 水果

## 识别热点

监控，追踪。用户访问，添加购物车，下单，统计分析（经验，BI）。

发现热点数据：分析日志，添加 队列，系统订阅。

## 解决方案

1，静态资源可以缓存在前面（浏览器端）

2，提前做缓存（数据）



