## 分布式锁

### 数据库实现

1，可以使用version的方式来对数据加锁

### 锁记录

bid，xxx字段 （开始时间，结束时间，flag）  定时任务 

1，这里使用时间的目的：如果出现了释放锁失败的场景，那么需要定时任务去清除

2，这种锁是非重入的

3，单点问题

### redis实现

1，使用setnx命令，需要一个过期时间，使用setifabsent(k, v , time)

2，这里需要一个续期的操作，一是避免删除的时候删掉了别人的锁   二是避免业务没有执行结束锁被释放

### 单点锁

1，可能会出现主挂了，此时从还没有同步数据，此时从升级为主，那么从也可以加锁成功

2，单点锁可能会出现的问题

如果jvm出现了stw，正好锁过期被释放了，那么也是会出现问题

### 红锁（奇数台）

1，准备多台redis，但是不是主从复制的。是独立的

2，过半加锁成功



### zk实现

zk可能也会失败，

1，当加锁成功之后，jvm出现了stw，那么也会释放

2，这时就需要在数据库中插入一行记录



## 分布式事务

### 1，消息队列 & 本地事务表·

![](D:\MyWork\MarkDownPicture\分布式\消息队列—本地事务表.png)

#### 这里可以放在一个本地事务

1，查询处new的事件

2，更新状态为已发送

3，发送到消息队列

如果发送失败，那么可以整体回滚

#### 处理消息

1，监听消息

2，插入本地事件表

3，发送ack

4，本地定时任务读取事件表的数据进行处理

### 2，两阶段提交（事务管理器--资源管理器）

 

#### 阶段一  这个阶段是预提交

1，事务询问

​	协调者节点向所有参与者节点询问是否可以执行提交操作，并开始等待各自参与者的响应

2，执行事务

​	参与者节点执行询问发起的所有事务操作。（如果成功，那么每个参与者已经向协调者反馈事务询问的响应）

​	各个参与者节点响应协调者发起的询问。如果参与者节点的事务操作成功，那么返回一个“同意”的消息。如果参   与者事务执行失败，那么返回一个“中止”的消息

#### 阶段二  真正提交

当协调者节点从所有参与者节点获得的消息都是“同意”时

发送提交请求---

协调者向所有的参与者发出“正式提交”的请求

事务提交---

参与者正式完成操作，并释放资源

--反馈事务提交结果

参与者向协调者发送“成功”的消息

--完成事务

协调者节点受到所有参与者节点反馈的“完成”消息后，完成事务

如果任一参与者节点在第一阶段返回的响应信息为“中止”，或者协调者在第一阶段的询问超时，之前无法获取所有参与者的响应消息：

--- 中断事务

发起回滚请求

协调者向所有的参与者发出“回滚”的请求

--事务回滚

参与者利用之前的undo信息回滚。释放资源

--反馈事务回滚结果

参与者向协调者节点发送“回滚完成”消息

-- 中断事务

协调者节点收到

**资源会一直占用**

TM可以会出现单点故障，会出现数据不一致，资源一直被占用

### 数据不一致

1，如果TM在发送提交指令的时候，网络不通，那么资源会被一直占用

2，TM发送完提交指令之后，RM挂了一台并且TM也挂了，那么会出现数据不一致的情况

### 3，三阶段

#### 一阶段

1，先询问系统是否网络通畅，或者服务是否挂了

剩下的和二阶段类似，这里不再详述

### 增加了超时机制

在二阶段等待超时之后，也会中断事务

RM和TM都有超时机制