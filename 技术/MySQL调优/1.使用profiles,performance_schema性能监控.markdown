## profile

### show profile

此工具默认是禁用的，可以通过服务器变量在绘画级别动态的修改
**set profiling=1;**
当设置完成之后，在服务器上执行的所有语句，都会测量其耗费的时间和其他一些查询执行状态变更相关的数据。
**select \* from emp;**
在mysql的命令行模式下只能显示两位小数的时间，可以使用如下命令查看具体的执行时间
**show profiles;**
执行如下命令可以查看详细的每个步骤的时间：
**show profile for query 1;**



### show processlist

使用show processlist查看连接的线程个数，来观察是否有大量线程处于不正常的状态或者其他不正常的特征

![process](D:\MyWork\MarkDownPicture\mysql\showprocesslist.png)





## 数据类型的选择

**更小的通常更好**

应该尽量使用可以正确存储数据的最小数据类型，更小的数据类型通常更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期更少，但是要确保没有低估需要存储的值的范围，如果无法确认哪个数据类型，就选择你认为不会超过范围的最小类型
案例：
设计两张表，设计不同的数据类型，查看表的容量

**简单就好**

简单数据类型的操作通常需要更少的CPU周期，例如，
1、整型比字符操作代价更低，因为字符集和校对规则是字符比较比整型比较更复杂，
2、使用mysql自建类型而不是字符串来存储日期和时间
3、用整型存储IP地址
案例：
创建两张相同的表，改变日期的数据类型，查看SQL语句执行的速度

**避免使用null**

如果查询中包含可为NULL的列，对mysql来说很难优化，因为可为null的列使得索引、索引统计和值比较都更加复杂，坦白来说，通常情况下null的列改为not null带来的性能提升比较小，所有没有必要将所有的表的schema进行修改，但是应该尽量避免设计成可为null的列

### 整数类型

可以使用的几种整数类型：TINYINT（1），SMALLINT（2），MEDIUMINT（3），INT（4），BIGINT（8）分别使用8，16，24，32，64位存储空间。
尽量使用满足需求的最小数据类型

### 字符和字符串类型

1、char长度固定，即每条数据占用等长字节空间；最大长度是255个字符，适合用在身份证号、手机号等定长字符串
2、varchar可变程度，可以设置最大长度；最大空间是65535个字节，适合用在长度可变的属性
3、text不设置长度，当不知道属性的最大长度时，适合用text
按照查询速度：char>varchar>text



2、会自动删除末尾的空格

3、检索效率、写效率 会比varchar高，以空间换时间

**使用场景**

1、存储长度波动不大的数据，如：md5摘要

2、存储短字符串、经常更新的字符串



### varchar

1. 使用最小的符合需求的长度。

2. varchar(n) n小于等于255使用额外一个字节保存长度，n>255使用额外两个字节保存长度。
3. varchar(5)与varchar(255)保存同样的内容，硬盘存储空间相同，但内存空间占用不同，是指定的大小 。
4. varchar在mysql5.6之前变更长度，或者从255一下变更到255以上时时，都会导致锁表。

**应用场景**

1、存储长度波动较大的数据，如：文章，有的会很短有的会很长

2、字符串很少更新的场景，每次更新后都会重算并使用额外存储空间保存长度

3、适合保存多字节字符，如：汉字，特殊字符等



MySQL 把每个 BLOB 和 TEXT 值当作一个独立的对象处理。
两者都是为了存储很大数据而设计的字符串类型，分别采用二进制和字符方式存储。

### datetime和timestamp

1、不要使用字符串类型来存储日期时间数据
2、日期时间类型通常比字符串占用的存储空间小
3、日期时间类型在进行查找过滤时可以利用日期来进行比对
4、日期时间类型还有着丰富的处理函数，可以方便的对时间类型进行日期计算
5、使用int存储日期时间不如使用timestamp类型

**datetime**

1. 占用8个字节

2. 与时区无关，数据库底层时区配置，对datetime无效

3. 可保存到毫秒

4. 可保存时间范围大

5. 不要使用字符串存储日期类型，占用空间大，损失日期类型函数的便捷性

**timestamp**

1. 占用4个字节
2. 时间范围：1970-01-01到2038-01-19
3. 精确到秒
4. 采用整形存储
5. 依赖数据库设置的时区
6. 自动更新timestamp列的值



**date**

1. 占用的字节数比使用字符串、datetime、int存储要少，使用date类型只需要3个字节
2. 使用date类型还可以利用日期时间函数进行日期之间的计算
3. date类型用于保存1000-01-01到9999-12-31之间的日期

**使用枚举代替字符串类型**

有时可以使用枚举类代替常用的字符串类型，mysql存储枚举类型会非常紧凑，会根据列表值的数据压缩到一个或两个字节中，mysql在内部会将每个值在列表中的位置保存为整数，并且在表的.frm文件中保存“数字-字符串”映射关系的查找表
 create table enum_test(e enum('fish','apple','dog') not null);
 insert into enum_test(e) values('fish'),('dog'),('apple');
 select e+0 from enum_test;

### ip地址

人们经常使用varchar(15)来存储ip地址，然而，它的本质是32位无符号整数不是字符串，可以使用INET_ATON()和INET_NTOA函数在这两种表示方法之间转换
案例：
select inet_aton('1.1.1.1')
select inet_ntoa(16843009)

## 合理使用范式和反范式

![](D:\MyWork\MarkDownPicture\mysql\范式.png)

![](D:\MyWork\MarkDownPicture\mysql\反范式.png)

![](D:\MyWork\MarkDownPicture\mysql\范式例子.png)



## 主键的选择

### 代理主键（推荐使用）

与业务无关的，无意义的数字序列

一个大多数表，最好是全部表，通用的键策略能够减少需要编写的源码数量，减少系统的总体拥有成本



### 自然主键

事物属性中的自然唯一标识

## 字符集选择

1.纯拉丁字符能表示的内容，没必要选择 latin1 之外的其他字符编码，因为这会节省大量的存储空间。

2.如果我们可以确定不需要存放多种语言，就没必要非得使用UTF8或者其他UNICODE字符类型，这回造成大量的存储空间浪费。

3.MySQL的数据类型可以精确到字段，所以当我们需要大型数据库中存放多字节数据的时候，可以通过对不同表不同字段使用不同的数据类型来较大程度减小数据存储量，进而降低 IO 操作次数并提高缓存命中率。



## 适当的数据冗余

1.被频繁引用且只能通过 Join 2张(或者更多)大表的方式才能得到的独立小字段。

2.这样的场景由于每次Join仅仅只是为了取得某个小字段的值，Join到的记录又大，会造成大量不必要的 IO，完全可以通过空间换取时间的方式来优化。不过，冗余的同时需要确保数据的一致性不会遭到破坏，确保更新的同时冗余字段也被更新。



当我们的表中存在类似于 TEXT 或者是很大的 VARCHAR类型的大字段的时候，如果我们大部分访问这张表的时候都不需要这个字段，我们就该义无反顾的将其拆分到另外的独立表中，以减少常用数据所占用的存储空间。这样做的一个明显好处就是每个数据块中可以存储的数据条数可以大大增加，既减少物理 IO 次数，也能大大提高内存中的缓存命中率。