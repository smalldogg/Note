### cap

#### 一致性

在分布式环境中，一致性是值数据在对各副本之间能够保持一致性

在一致性的需求下，当系统在数据一致性的状态下执行更新操作后，应该保持系统的数据仍然处于一致性的状态

对于将一个数据副本分布在不同的分布式节点上的系统来说，当对第一个节点进行了更新操作后，却没有使得第二个节点上的数据得到相应的更新，那么在查询第二个节点的数据时，获取的数据仍然是老数据，这就是分布式数据不一致的情况。

强一致性：一个数据项更新后，所有用户读取到的数据都是最新的，那么就是强一致性

#### 可用性

系统提供的服务需要一直处于可用的状态。对于用户的每一个操作总是能够在有限的时间内返回结果。

#### 分区容错性

当系统遇到了任何网络分区发生故障的时候，仍然需要能够对外提供满足一致性和可用性的服务。

![](D:\MyWork\MarkDownPicture\分布式\cap定理.png)

### base理论

#### 基本可用

1. 响应时间的损失 查询的时间增加了
2. 功能上的损失 将用户引导到一个降级页面

#### 弱状态

允许系统中的数据存在中间状态，并认为该状态不会影响到系统整体可用性。允许系统在不同的数据副本之间进行数据同步存在延时

#### 最终一致性

系统中所有的数据副本达到一致的状态

### zk

#### 顺序一致性

从一个客户端发起的事务请求，最终会严格的按照顺序被应用到zk中

#### 原子性

所有事务请求的处理结果在整个集群中所有的机器上的应用是一致性的，不会出现部分机器应用了该事务，但是另一部分没应用

##### 单一视图

无论客户端连接的是哪个zk服务器，其看到的服务端数据模型都是一致的

#### 实时性

zk保证的是在一段时间内，客户端最终一定从服务端读取到最新的数据状态

​	

### zk特性

#### 顺序访问

对于客户端的每个更新请求，zk都会分配一个全局唯一的递增编号。

#### 集群

zk保证的是过半可以维持访问，集群中的每台机器之间都保持着互相通信。客户端连接到集群中的任意一台机器，断开连接后，客户端会自动连接到集群中的其他机器

#### 高性能

zk中的所有数据都是存储在内存中

#### 角色

1. leader
2. follower
3. observer 不能参与选举的过程，但是可以读

### zab

所有事务请求必须由一个全局唯一的服务器来协调处理（leader）,其余的服务器称为follower服务器，leader服务器负责将一个客户端的请求转换成一个事务（提议），并将该提议分发给follower。当超过半数的服务器正确反馈后，那么向所有的follower发送commit消息，要求其将前一个提议提交

