**1、整型**

| **MySQL数据类型** | **含义（有符号）**                   |
| ----------------- | ------------------------------------ |
| tinyint(m)        | 1个字节 范围(-128~127)               |
| smallint(m)       | 2个字节 范围(-32768~32767)           |
| mediumint(m)      | 3个字节 范围(-8388608~8388607)       |
| int(m)            | 4个字节 范围(-2147483648~2147483647) |
| bigint(m)         | 8个字节 范围(+-9.22*10的18次方)      |

 

取值范围如果加了unsigned，则最大值翻倍，如tinyint unsigned的取值范围为(0~256)。

**2、浮点型(float和double)**

| **MySQL数据类型** | **含义**                                         |
| ----------------- | ------------------------------------------------ |
| float(m,d)        | 单精度浮点型  8位精度(4字节)   m总个数，d小数位  |
| double(m,d)       | 双精度浮点型  16位精度(8字节)   m总个数，d小数位 |



设一个字段定义为float(5,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位。

**3、定点数**

浮点型在数据库中存放的是**近似值**，而定点类型在数据库中存放的是**精确值**。
decimal(m,d) 参数m<65 是总个数，d<30且 d<m 是小数位。

decimal(m,d) 定点类型浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。参数m是定点类型数字的最大个数（精度），范围为0~65，d小数点右侧数字的个数，范围为0~30，但不得超过m。对定点数的计算能精确到65位数字。

浮点数一般用于表示含有小数部分的数值。当一个字段被定义为浮点类型以后，如果插入数据的精度超过了该列定义的实际精度，则插入值会被四舍五入到实际定义的精度值，然后插入，四舍五入的过程不会报错。MySQL中的float、double（real）用来表示浮点数。

定点数不同于浮点数，定点数实际上是用字符串形式存放的，所以定点数可以更精确的存放数据。如果插入数据的精度大于实际定义的精度，则MySQL会发出告警，但数据按照实际精度四舍五入后插入（如果是在传统模式下插入，则会报错）。在MySQL中，用decimal（或numberic）来表示定点数。

用浮点数存储数据会存在误差，在精度要求比较高的场景（如货币），应该使用定点数来存放数据。例如：

![img](https://images2015.cnblogs.com/blog/249993/201612/249993-20161207163106507-216201973.png)

![img](https://images2015.cnblogs.com/blog/249993/201612/249993-20161207163124476-848340898.png)

**4、字符串(char,varchar,text)**

| **MySQL数据类型** | **含义**                        |
| ----------------- | ------------------------------- |
| char(n)           | 固定长度，最多255个字符         |
| varchar(n)        | 可变长度，最多65535个字符       |
| tinytext          | 可变长度，最多255个字符         |
| text              | 可变长度，最多65535个字符       |
| mediumtext        | 可变长度，最多2的24次方-1个字符 |
| longtext          | 可变长度，最多2的32次方-1个字符 |



**char和varchar：**
(1).char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，varchar不限于此。
(2).char(n) 固定长度，char(4)不管是存入几个字符，都将占用4个字节，varchar是存入的实际字符数+1个字节（n<=255）或2个字节(n>255)，所以varchar(4),存入3个字符将占用4个字节。
(3).char类型的字符串检索速度要比varchar类型的快。

char和varchar类型类似，都用来存储字符串，但是它们保存和检索字符串的方式不同。char属于**固定长度的字符类型**，varchar属于**可变长度的字符类型**。例如：对于char(4)和varchar(4)这两种类型定义来说：
(1)、''在char(4)中占了4个字节长度，varchar(4)则只占用一个字节的长度；
(2)、'ab'在char(4)中占了4个字节长度，varchar(4)中则只占用了3个字节的长度；
(3)、'abcd'在char(4)中占用了4个字节长度，在varchar(4)中则占用了5个字节的长度；

为何在varchar类型中会多出一个字节长度呢？这是因为varchar类型将这多出的一个字节用于保存varchar类型实际使用了多大的长度。char(4)和varchar(4)的检索并不总是相同的，例如：

![img](https://images2015.cnblogs.com/blog/249993/201612/249993-20161207164716507-625692078.png)

由于char是固定长度的，所以它的处理速度比varchar快的多，但其缺点是浪费存储空间，程序需要对尾部空格进行处理等缺点，所以多那些长度变化不大并且对查询速度有较高要求的的数据可以考虑使用char类型来存储。随着MySQL版本的不断升级，varchar数据类型的性能也将不断提升，varchar类型的应用范围更加广泛。

**CHAR 和 VARCHAR 类型**
　　CHAR 类型用于**定长字符串**，并且必须在圆括号内用一个大小修饰符来定义。这个大小修饰符的范围从 0-255。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补。 

　　CHAR 类型可以使用 BINARY 修饰符。当用于比较运算时，这个修饰符使 CHAR 以二进制方式参于运算，而不是以传统的区分大小写的方式。

　　CHAR 类型的一个变体是 VARCHAR 类型。它是一种**可变长度的字符串类型**，并且也必须带有一个范围在 0-255 之间的指示器。CHAR 和 VARCHGAR 不同之处在于 MySQL 数据库处理这个指示器的方式：CHAR 把这个大小视为值的大小，不长度不足的情况下就用空格补足。而 VARCHAR 类型把它视为最大值并且只使用存储字符串实际需要的长度（增加一个额外字节来存储字符串本身的长度）来存储值。所以短于指示器长度的 VARCHAR 类型不会被空格填补，但长于指示器的值仍然会被截短。

　　因为 VARCHAR 类型可以根据实际内容动态改变存储值的长度，所以在不能确定字段需要多少字符时使用 VARCHAR 类型可以大大地节约磁盘空间、提高存储效率。

**5.二进制数据(Blob)**

(1).BLOB和text存储方式不同，TEXT以文本方式存储，英文存储区分大小写，而Blob是以二进制方式存储，不分大小写。
(2).BLOB存储的数据只能整体读出。
(3).TEXT可以指定字符集，BLOB不用指定字符集。

在保存少量字符串的时候，可以使用char和varchar数据类型。在保存较大的文本时，通常会选择使用text或BLOB。两者之间的主要差别是：BLOB能用来保存二进制数据，例如：照片，而text只能用于保存字符类型数据。text和BLOB中又分别包括text、mediumtext、longtext和blob、mediumblob、longblob三种不同的类型。它们之间的主要区别是存储文本的长度不同和存储字节不同。

**6.日期时间类型**

| **MySQL数据类型** | **含义**                      |
| ----------------- | ----------------------------- |
| date              | 日期 '2008-12-2'              |
| time              | 时间 '12:25:36'               |
| datetime          | 日期时间 '2008-12-2 22:06:44' |
| timestamp         | 自动存储记录修改时间          |

 

若定义一个字段为timestamp，这个字段里的时间数据会随其他字段修改的时候自动刷新，所以这个数据类型的字段可以存放这条记录最后被修改的时间。

**7.ENUM类型(枚举类型)，在定义时指定取值范围。**

属性名 ENUM('值1','值2','值3'...'值n')

![img](https://images2015.cnblogs.com/blog/249993/201612/249993-20161215163330339-714333851.jpg)

```
CREATE TABLE Test4(Sex ENUM('男','女'));
INSERT INTO Test4 VALUES('男');
INSERT INTO Test4 VALUES('爷');    --这行报错
SELECT * FROM Test4;
```

**8.SET类型（集合）**

在创建表时，就指定SET类型的取值范围。

```
属性名 SET('值1','值2','值3'...,'值n')
```

它与ENUM的区别在什么地方呢？基本上就是多选的ENUM。

![img](https://images2015.cnblogs.com/blog/249993/201612/249993-20161215163516792-1265374383.jpg)

**9.数据类型的属性**

| **MySQL关键字**    | **含义**                 |
| ------------------ | ------------------------ |
| NULL               | 数据列可包含NULL值       |
| NOT NULL           | 数据列不允许包含NULL值   |
| DEFAULT            | 默认值                   |
| PRIMARY KEY        | 主键                     |
| AUTO_INCREMENT     | 自动递增，适用于整数类型 |
| UNSIGNED           | 无符号                   |
| CHARACTER SET name | 指定一个字符集           |



 

**10.数据类型的选择**

（1）整型：根据要显示的最大值决定；
（2）浮点型：要显示小数。如果要精确到小数点后10位，就选择DOUBLE，而不应该选择FLOAT。DECIMAL精度较高，浮点数会出现误差，如果精度较高，则应选择定点数DECIMAL；
（3）字符串型：定长与变长的区别，CHAR类型占用空间比较大，但是处理速度比VARCHAR快，如果长度变化不大，如身份证号码那种，最好选择CHAR类型。而对于评论字符串，最好选择VARCHAR；对于char，mysql不会回收多余的空间，而对于varchar，mysql会回收多余的空间；
（4）时间：根据需要显示的类型咯，特别是TIMESTAMP,如果需要显示的时间与时区对应，就应该选择TIMESTAMP；
（5）ENUM类型和SET类型：长度不同，ENUM类型最多可以由65535个成员，而SET类型最多只能包含64个成员。且ENUM只能单选，而SET类型可以多选；
（6）TEXT类型和BLOB类型：TEXT只能存储字符数据，而BLOB可以存储二进制数据。如果是纯文本，适合TEXT。如果是图片等适合存二进制。

char和varchar：

- 都可以通过指定n来限制存储的最大字符数长度，char(20)和varchar(20)将最多只能存储20个字符，超过的字符将会被截掉。n必须小于该类型允许的最大字符数
- char类型指定了n之后，如果存入的字符数小于n，后面将会以空格补齐，查询的时候再将末尾的空格去掉，所以char类型存储的字符串末尾不能有空格，varchar不受此限制
- 内部存储的机制不同。char是固定长度，char(4)不管是存1个字符、2个字符或者4个字符（英文的），都将占用4个字节。varchar是存入的实际字符数+1个字节（n<=255）或2个字节（n>255），所以，varchar(4)存入一个字符将占用2个字节，2个字符占用3个字节，4个字符占用5个字节
- char类型的字符串检索速度要比varchar类型快

varchar和text：

- 都是可变长度的，最多能存储65535个字符
- varchar可指定n，text不能指定，内部存储varchar是存入的实际字符数+1个字节（n<=255）或2个字节（n>255）,text是实际字符数+2个字节
- text类型不能有默认值
- varchar可直接创建索引，text创建索引要指定前多少个字符，查询速度varchar要快于text。